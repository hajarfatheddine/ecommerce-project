#server.port=0
server.port=8083
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=c##_order_service
spring.datasource.password=orderservice
spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.Oracle12cDialect
spring.jpa.hibernate.ddl-auto=update
spring.application.name=order-service
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

# Resilience4j properties
# ======================================================================================================================
# To see the different state of circuitBreaker: closed - open -half open
resilience4j.circuitbreaker.instances.inventory.register-health-indicator=true
# How much buffer size it's going to take
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
# This property ensure that circuitBreaker won't change the state from closed to open right away
resilience4j.circuitbreaker.instances.inventory.sliding-window-type=COUNT_BASED
# The number of request to execute before changing the state of the circuitBreaker
resilience4j.circuitbreaker.instances.inventory.sliding-window-size=5
resilience4j.circuitbreaker.instances.inventory.failure-rate-threshold=50
# How much time to wait in the open stats
resilience4j.circuitbreaker.instances.inventory.wait-duration-in-open-state=5s
# How many calls in the half open state. if, for example, after three calls there is no response still the circuitBreaker will change the state from half open to open
resilience4j.circuitbreaker.instances.inventory.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.inventory.automatic-transition-from-open-to-half-open-enabled=true

# ======================================================================================================================
# Resilience4j timeout properties
# If the service is not responding within 3s, circuitBreaker will terminate the call and throw a timeOutException
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

# ======================================================================================================================
# Resilience4j retry properties
# max retry attempts
resilience4j.retry.instances.inventory.max-attempts=3
# wait for 5s before retrying the call again
resilience4j.retry.instances.inventory.wait-duration=5s

#distributed tracing
management.tracing.sampling.probability=1.0